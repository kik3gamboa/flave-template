"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_1 = require("./tokens");
var configuration_1 = require("./configuration");
var dictonary_1 = require("./dictonary");
var parser_1 = require("./parser");
var Transpiler = /** @class */ (function () {
    function Transpiler(input, config) {
        this.lastWrite = '\n';
        this.indent = '';
        this.nestLevel = [];
        this.transpiled = '';
        this.exportslist = [];
        this.classname = '';
        this.views = [];
        this.config = new configuration_1.Configuration({
            quote: '\'',
            stripcomments: true,
            output: '$O',
            trim: true,
            newlines: true,
            export: true,
            debug: false,
            format: true,
        });
        for (var key in config)
            this.config.value(key, config[key]);
        this.tokens = tokens_1.Tokenizer(input);
        parser_1.Parse.Source(this);
    }
    Transpiler.prototype.nest = function () {
        if (this.tokens.current().Info.GroupEdge == 'OPEN')
            this.nestLevel.push(this.tokens.current());
        else if (this.nestLevel.length) {
            var last = this.nestLevel.pop();
            if (last.Info.SubType != this.tokens.current().Info.SubType) {
                throw this.error('Expected ' + dictonary_1.Names[last.Info.Name.replace(/L$/, 'R')].Symbol + ' instead of ' + this.tokens.current().Value);
            }
        }
        else {
            throw this.error('Did not expect ' + this.tokens.current().Value);
        }
    };
    Transpiler.prototype.error = function (message) {
        return message.replace(/\n/, 'New Line') + ' at Line ' + this.tokens.line;
    };
    Transpiler.prototype.writeSegment = function (string) {
        var write = string;
        if (this.lastWrite.slice(-1) == '\n' && write.substr(0, 1) == '\n')
            write = write.substr(1);
        else if (this.lastWrite.trim() == '' && write.indexOf(this.lastWrite) === 0)
            write = write.substr(this.lastWrite.length);
        if (write == '')
            return;
        this.lastWrite = string;
        this.transpiled += write;
    };
    Transpiler.prototype.writeNewLine = function (indent) {
        if (!this.config.value('format'))
            return;
        var nl = '\n' + (indent ? this.indent : '');
        this.writeSegment(nl);
    };
    Transpiler.prototype.writeView = function (string) {
        string = tokens_1.Tokens.getString(string);
        if (string.length > 1)
            throw 'some err';
        this.writeSegment(string[0].replace('\\', '\\\\').replace(new RegExp(this.config.value('quote'), 'g'), '\\' + this.config.value('quote')));
    };
    Transpiler.prototype.writeViewJoin = function (inline) {
        if (!this.config.value('format')) {
            this.writeSegment('+');
            return;
        }
        this.writeSegment((inline ? ' ' : '\t') + '+ ');
    };
    ;
    Transpiler.prototype.writeLiteral = function (lines, inline) {
        if (inline === void 0) { inline = false; }
        lines = tokens_1.Tokens.getString(lines);
        for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim() == '')
                continue;
            if (!inline)
                this.writeNewLine(true);
            this.writeSegment(inline || !this.config.value('trim') ? lines[i] : lines[i].replace(/^\s+/, ''));
            if (i != lines.length - 1)
                this.writeNewLine();
            inline = false;
        }
    };
    Transpiler.prototype.indent_add = function () {
        this.indent += '\t';
    };
    Transpiler.prototype.indent_sub = function () {
        this.indent = this.indent.slice(0, -1);
    };
    return Transpiler;
}());
exports.Transpiler = Transpiler;
